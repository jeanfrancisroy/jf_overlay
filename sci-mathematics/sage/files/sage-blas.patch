--- module_list.py.orig	2014-01-23 22:04:26.264860497 +1300
+++ module_list.py	2014-01-28 14:03:14.119293492 +1300
@@ -4,6 +4,7 @@
 from distutils.core import setup
 from distutils.extension import Extension
 from sage.env import *
+import pkgconfig
 
 SAGE_INC = os.path.join(SAGE_LOCAL, 'include')
 
@@ -11,26 +12,8 @@
 ### BLAS setup
 #########################################################
 
-## Choose cblas library -- note -- make sure to update sage/misc/cython.py
-## if you change this!!
-if os.environ.has_key('SAGE_BLAS'):
-    BLAS=os.environ['SAGE_BLAS']
-    BLAS2=os.environ['SAGE_BLAS']
-elif os.path.exists('%s/lib/libatlas.so'%os.environ['SAGE_LOCAL']):
-    BLAS='cblas'
-    BLAS2='atlas'
-elif os.path.exists('/usr/lib/libcblas.dylib') or \
-     os.path.exists('/usr/lib/libcblas.so'):
-    BLAS='cblas'
-    BLAS2='cblas'
-elif os.path.exists('/usr/lib/libblas.dll.a'):
-    BLAS='gslcblas'
-    BLAS2='gslcblas'
-else:
-    # This is very slow  (?), but *guaranteed* to be available.
-    BLAS='gslcblas'
-    BLAS2='gslcblas'
-
+blas_libs = list(pkgconfig.parse('cblas')['libraries'])
+blas_dir  = list(pkgconfig.parse('cblas')['library_dir'])
 
 #########################################################
 ### Commonly used definitions
@@ -602,42 +585,50 @@
 
     Extension('sage.gsl.callback',
               sources = ['sage/gsl/callback.pyx'],
-              libraries = ['gsl', BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries = ['gsl'] + blas_libs,
               define_macros=[('GSL_DISABLE_DEPRECATED','1')]),
 
     Extension('sage.gsl.dwt',
               sources = ['sage/gsl/dwt.pyx'],
-              libraries=['gsl',BLAS],
+              library_dirs = blas_dir,
+              libraries=['gsl'] + blas_libs,
               define_macros=[('GSL_DISABLE_DEPRECATED','1')]),
 
     Extension('sage.gsl.fft',
               sources = ['sage/gsl/fft.pyx'],
-              libraries = ['gsl', BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries = ['gsl'] + blas_libs,
               define_macros=[('GSL_DISABLE_DEPRECATED','1')]),
 
     Extension('sage.gsl.gsl_array',
               sources = ['sage/gsl/gsl_array.pyx'],
-              libraries=['gsl', BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries=['gsl'] + blas_libs,
               define_macros=[('GSL_DISABLE_DEPRECATED','1')]),
 
     Extension('sage.gsl.integration',
               sources = ['sage/gsl/integration.pyx'],
               define_macros=[('GSL_DISABLE_DEPRECATED','1')],
-              libraries=['gsl',BLAS, BLAS2]),
+              library_dirs = blas_dir,
+              libraries=['gsl'] + blas_libs),
 
     Extension('sage.gsl.interpolation',
               sources = ['sage/gsl/interpolation.pyx'],
-              libraries = ['gsl', BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries = ['gsl'] + blas_libs,
               define_macros=[('GSL_DISABLE_DEPRECATED','1')]),
 
     Extension('sage.gsl.ode',
               sources = ['sage/gsl/ode.pyx'],
-              libraries=['gsl',BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries=['gsl'] + blas_libs,
               define_macros=[('GSL_DISABLE_DEPRECATED','1')]),
 
     Extension('sage.gsl.probability_distribution',
               sources = ['sage/gsl/probability_distribution.pyx'],
-              libraries=['gsl', BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries=['gsl'] + blas_libs,
               define_macros=[('GSL_DISABLE_DEPRECATED','1')]),
 
     ################################
@@ -690,10 +681,11 @@
 
     Extension('sage.libs.linbox.linbox',
               sources = ['sage/libs/linbox/linbox.pyx'],
+              library_dirs = blas_dir,
               # For this to work on cygwin, linboxsage *must* be
               # before ntl.
               libraries = ['linboxsage', 'ntl', 'iml', 'linbox',
-                           'stdc++', 'givaro', 'mpfr', 'gmp', 'gmpxx', BLAS, BLAS2],
+                           'stdc++', 'givaro', 'mpfr', 'gmp', 'gmpxx'] + blas_libs,
               language = 'c++',
               extra_compile_args = givaro_extra_compile_args,
               depends = [SAGE_INC + '/givaro/givconfig.h']),
@@ -1005,7 +997,8 @@
 
     Extension('sage.matrix.change_ring',
               sources = ['sage/matrix/change_ring.pyx'],
-              libraries=[BLAS, BLAS2, 'gmp'],
+              library_dirs = blas_dir,
+              libraries=['gmp'] + blas_libs,
               include_dirs = numpy_include_dirs),
 
     Extension('sage.matrix.matrix',
@@ -1023,7 +1016,8 @@
 
     Extension('sage.matrix.matrix_complex_double_dense',
               sources = ['sage/matrix/matrix_complex_double_dense.pyx'],
-              libraries=[BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries = blas_libs,
               include_dirs = numpy_include_dirs,
               depends = numpy_depends),
 
@@ -1037,7 +1031,8 @@
 
     Extension('sage.matrix.matrix_double_dense',
               sources = ['sage/matrix/matrix_double_dense.pyx'],
-              libraries=[BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries = blas_libs,
               include_dirs = numpy_include_dirs,
               depends = numpy_depends),
 
@@ -1056,8 +1051,9 @@
               sources = ['sage/matrix/matrix_integer_dense.pyx'],
               extra_compile_args = m4ri_extra_compile_args,
               depends = [SAGE_INC + '/m4ri/m4ri.h'],
+              library_dirs = blas_dir,
               # order matters for cygwin!!
-              libraries = ['iml', 'pari', 'gmp', 'm', BLAS, BLAS2]),
+              libraries = ['iml', 'pari', 'gmp', 'm'] + blas_libs),
 
     Extension('sage.matrix.matrix_integer_sparse',
               sources = ['sage/matrix/matrix_integer_sparse.pyx'],
@@ -1084,13 +1080,15 @@
     Extension('sage.matrix.matrix_modn_dense_float',
               sources = ['sage/matrix/matrix_modn_dense_float.pyx'],
               language="c++",
-              libraries = ['linbox', 'givaro', 'mpfr', 'gmpxx', 'gmp', BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries = ['linbox', 'givaro', 'mpfr', 'gmpxx', 'gmp'] + blas_libs,
               extra_compile_args = ['-DDISABLE_COMMENTATOR'] + givaro_extra_compile_args),
 
     Extension('sage.matrix.matrix_modn_dense_double',
               sources = ['sage/matrix/matrix_modn_dense_double.pyx'],
               language="c++",
-              libraries = ['linbox', 'givaro', 'mpfr', 'gmpxx', 'gmp', BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries = ['linbox', 'givaro', 'mpfr', 'gmpxx', 'gmp'] + blas_libs,
               extra_compile_args = ['-DDISABLE_COMMENTATOR'] + givaro_extra_compile_args),
 
     Extension('sage.matrix.matrix_modn_sparse',
@@ -1115,7 +1113,8 @@
 
     Extension('sage.matrix.matrix_real_double_dense',
               sources = ['sage/matrix/matrix_real_double_dense.pyx'],
-              libraries=[BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries = blas_libs,
               include_dirs = numpy_include_dirs,
               depends = numpy_depends),
 
@@ -1348,13 +1347,15 @@
 
     Extension('sage.modules.vector_complex_double_dense',
               ['sage/modules/vector_complex_double_dense.pyx'],
-              libraries = [BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries = blas_libs,
               include_dirs = numpy_include_dirs,
               depends = numpy_depends),
 
     Extension('sage.modules.vector_double_dense',
               ['sage/modules/vector_double_dense.pyx'],
-              libraries = [BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries = blas_libs,
               include_dirs = numpy_include_dirs,
               depends = numpy_depends),
 
@@ -1378,7 +1379,8 @@
 
     Extension('sage.modules.vector_real_double_dense',
               ['sage/modules/vector_real_double_dense.pyx'],
-              libraries = [BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries = blas_libs,
               include_dirs = numpy_include_dirs,
               depends = numpy_depends),
 
@@ -1504,7 +1506,8 @@
     Extension('sage.rings.complex_double',
               sources = ['sage/rings/complex_double.pyx'],
               extra_compile_args=["-std=c99",  "-D_XPG6"],
-              libraries = (['gsl', BLAS, BLAS2, 'pari', 'gmp', 'm'])),
+              library_dirs = blas_dir,
+              libraries = ['gsl', 'pari', 'gmp', 'm'] + blas_libs),
 
     Extension('sage.rings.complex_interval',
               sources = ['sage/rings/complex_interval.pyx'],
@@ -1570,7 +1573,8 @@
 
     Extension('sage.rings.real_double',
               sources = ['sage/rings/real_double.pyx'],
-              libraries = ['gsl', 'gmp', BLAS, BLAS2],
+              library_dirs = blas_dir,
+              libraries = ['gsl', 'gmp'] + blas_libs,
               depends = numpy_depends,
               define_macros=[('GSL_DISABLE_DEPRECATED','1')]),
 
--- sage/misc/cython.py.orig	2014-01-28 14:13:30.806106864 +1300
+++ sage/misc/cython.py	2014-01-28 22:21:50.725295021 +1300
@@ -22,50 +22,35 @@
 from sage.env import SAGE_LOCAL, SAGE_SRC, UNAME
 from misc import SPYX_TMP
 
-def cblas():
+def cblas_libs():
     """
-    Return the name of the cblas library on this system. If the environment
-    variable :envvar:`$SAGE_CBLAS` is set, just return its value. If not,
-    return ``'cblas'`` if :file:`/usr/lib/libcblas.so` or
-    :file:`/usr/lib/libcblas.dylib` exists, return ``'blas'`` if
-    :file:`/usr/lib/libblas.dll.a` exists, and return ``'gslcblas'`` otherwise.
+    Return the name of the cblas library on this system. Uses pkgconfig to determine
+    the libray used.
 
     EXAMPLES::
 
-        sage: sage.misc.cython.cblas() # random -- depends on OS, etc.
+        sage: sage.misc.cython.cblas_libs() # random -- depends on OS, etc.
         'cblas'
     """
-    if 'SAGE_CBLAS' in os.environ:
-        return os.environ['SAGE_CBLAS']
-    elif os.path.exists('/usr/lib/libcblas.dylib') or \
-         os.path.exists('/usr/lib/libcblas.so'):
-        return 'cblas'
-    elif os.path.exists('/usr/lib/libblas.dll.a'):   # untested.
-        return 'blas'
-    else:
-        # This is very slow (?), but *guaranteed* to be available.
-        return 'gslcblas'
 
-# In case of ATLAS we need to link against cblas as well as atlas
-# In the other cases we just return the same library name as cblas()
-# which is fine for the linker
-#
-# We should be using the Accelerate FrameWork on OS X, but that requires
-# some magic due to distutils having ridden on the short bus :)
-def atlas():
+    import pkgconfig
+
+    return list(pkgconfig.parse('cblas')['libraries'])
+
+def cblas_dir():
     """
-    Returns the name of the ATLAS library to use. On Darwin or Cygwin, this is
-    ``'blas'``, and otherwise it is ``'atlas'``.
+    Return the path where the cblas library is located on this system if it is
+    different from the normal search path. Uses pkgconfig to determine the path.
 
     EXAMPLES::
 
-        sage: sage.misc.cython.atlas() # random -- depends on OS
-        'atlas'
+        sage: sage.misc.cython.cblas_dir() # random -- depends on OS, etc.
+        ''
     """
-    if UNAME == "Darwin" or "CYGWIN" in UNAME:
-        return 'blas'
-    else:
-        return 'atlas'
+
+    import pkgconfig
+
+    return list(pkgconfig.parse('cblas')['library_dir'])
 
 include_dirs = [os.path.join(SAGE_LOCAL,'include','csage'),
                 os.path.join(SAGE_LOCAL,'include'), \
@@ -77,7 +62,7 @@
 
 
 standard_libs = ['mpfr', 'gmp', 'gmpxx', 'stdc++', 'pari', 'm', \
-                 'ec', 'gsl', cblas(), atlas(), 'ntl', 'csage']
+                 'ec', 'gsl'] + cblas_libs() + [ 'ntl', 'csage']
 
 offset = 0
 
@@ -205,7 +190,6 @@
         'm',
         'ec',
         'gsl',
-        '...blas',
         ...,
         'ntl',
         'csage'],
@@ -217,8 +201,8 @@
         '...',
         '.../sage/gsl'],
         'c',
-        [], ['-w', '-O2'])
-        sage: s, libs, inc, lang, f, args = pyx_preparse("# clang c++\n #clib foo\n # cinclude bar\n")
+        [], ['-w', '-O2'],...)
+        sage: s, libs, inc, lang, f, args, libdirs = pyx_preparse("# clang c++\n #clib foo\n # cinclude bar\n")
         sage: lang
         'c++'
 
@@ -229,7 +213,7 @@
         'pari',
         'm',
         'ec',
-        'gsl', '...blas', ...,
+        'gsl', ...,
         'ntl',
         'csage']
         sage: libs[1:] == sage.misc.cython.standard_libs
@@ -245,7 +229,7 @@
         '...',
         '.../sage/gsl']
 
-        sage: s, libs, inc, lang, f, args = pyx_preparse("# cargs -O3 -ggdb\n")
+        sage: s, libs, inc, lang, f, args, libdirs = pyx_preparse("# cargs -O3 -ggdb\n")
         sage: args
         ['-w', '-O2', '-O3', '-ggdb']
 
@@ -273,9 +257,10 @@
     if lang != "c++": # has issues with init_csage()
         s = """\ninclude "interrupt.pxi"  # ctrl-c interrupt block support\ninclude "stdsage.pxi"  # ctrl-c interrupt block support\n""" + s
     args, s = parse_keywords('cargs', s)
+    libdirs = cblas_dir()
     args = ['-w','-O2'] + args
 
-    return s, libs, inc, lang, additional_source_files, args
+    return s, libs, inc, lang, additional_source_files, args, libdirs
 
 ################################################################
 # If the user attaches a .spyx file and changes it, we have
@@ -411,7 +396,7 @@
 
     F = open(filename).read()
 
-    F, libs, includes, language, additional_source_files, extra_args = pyx_preparse(F)
+    F, libs, includes, language, additional_source_files, extra_args, libdirs = pyx_preparse(F)
 
     # add the working directory to the includes so custom headers etc. work
     includes.append(os.path.split(os.path.splitext(filename)[0])[0])
@@ -451,19 +436,17 @@
 
 from sage.env import SAGE_LOCAL
 
-extra_link_args =  ['-L' + SAGE_LOCAL + '/lib']
 extra_compile_args = %s
 
 ext_modules = [Extension('%s', sources=['%s.%s', %s],
                      libraries=%s,
-                     library_dirs=[SAGE_LOCAL + '/lib/'],
+                     library_dirs=[SAGE_LOCAL + '/lib/', '%s'],
                      extra_compile_args = extra_compile_args,
-                     extra_link_args = extra_link_args,
                      language = '%s' )]
 
 setup(ext_modules = ext_modules,
       include_dirs = %s)
-    """%(extra_args, name, name, extension, additional_source_files, libs, language, includes)
+    """%(extra_args, name, name, extension, additional_source_files, libs, libdirs, language, includes)
     open('%s/setup.py'%build_dir,'w').write(setup)
 
     cython_include = ' '.join(["-I '%s'"%x for x in includes if len(x.strip()) > 0 ])
