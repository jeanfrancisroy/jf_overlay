diff --git a/rules/rules.d/95-udev-late.rules b/rules/rules.d/95-udev-late.rules
index 7207081..eca0faa 100644
--- a/rules/rules.d/95-udev-late.rules
+++ b/rules/rules.d/95-udev-late.rules
@@ -2,7 +2,3 @@
 
 # run a command on remove events
 ACTION=="remove", ENV{REMOVE_CMD}!="", RUN+="$env{REMOVE_CMD}"
-
-# event to be catched by udevmonitor
-RUN+="socket:@/org/kernel/udev/monitor"
-
diff --git a/udev/lib/libudev-monitor.c b/udev/lib/libudev-monitor.c
index 502fe24..4208904 100644
--- a/udev/lib/libudev-monitor.c
+++ b/udev/lib/libudev-monitor.c
@@ -37,6 +37,7 @@ struct udev_monitor {
 	int refcount;
 	int sock;
 	struct sockaddr_nl snl;
+	struct sockaddr_nl snl_peer;
 	struct sockaddr_un sun;
 	socklen_t addrlen;
 };
@@ -98,7 +99,7 @@ struct udev_monitor *udev_monitor_new_from_socket(struct udev *udev, const char
 	return udev_monitor;
 }
 
-struct udev_monitor *udev_monitor_new_from_netlink(struct udev *udev)
+struct udev_monitor *udev_monitor_new_from_netlink(struct udev *udev, unsigned int group)
 {
 	struct udev_monitor *udev_monitor;
 
@@ -118,10 +119,11 @@ struct udev_monitor *udev_monitor_new_from_netlink(struct udev *udev)
 	}
 
 	udev_monitor->snl.nl_family = AF_NETLINK;
-	udev_monitor->snl.nl_pid = getpid();
-	udev_monitor->snl.nl_groups = 1;
+	udev_monitor->snl.nl_groups = group;
+	udev_monitor->snl_peer.nl_family = AF_NETLINK;
+	udev_monitor->snl_peer.nl_groups = UDEV_MONITOR_UDEV;
 
-	dbg(udev, "monitor %p created with NETLINK_KOBJECT_UEVENT\n", udev_monitor);
+	dbg(udev, "monitor %p created with NETLINK_KOBJECT_UEVENT (%u)\n", udev_monitor, group);
 	return udev_monitor;
 }
 
@@ -130,23 +132,22 @@ int udev_monitor_enable_receiving(struct udev_monitor *udev_monitor)
 	int err;
 	const int on = 1;
 
-	if (udev_monitor->snl.nl_family != 0) {
-		err = bind(udev_monitor->sock, (struct sockaddr *)&udev_monitor->snl, sizeof(struct sockaddr_nl));
-		if (err < 0) {
-			err(udev_monitor->udev, "bind failed: %m\n");
-			return err;
-		}
-		dbg(udev_monitor->udev, "monitor %p listening on netlink\n", udev_monitor);
-	} else if (udev_monitor->sun.sun_family != 0) {
-		err = bind(udev_monitor->sock, (struct sockaddr *)&udev_monitor->sun, udev_monitor->addrlen);
-		if (err < 0) {
-			err(udev_monitor->udev, "bind failed: %m\n");
-			return err;
-		}
-		/* enable receiving of the sender credentials */
-		setsockopt(udev_monitor->sock, SOL_SOCKET, SO_PASSCRED, &on, sizeof(on));
-		dbg(udev_monitor->udev, "monitor %p listening on socket\n", udev_monitor);
+	if (udev_monitor->sun.sun_family != 0)
+		err = bind(udev_monitor->sock,
+			   (struct sockaddr *)&udev_monitor->sun, udev_monitor->addrlen);
+	else if (udev_monitor->snl.nl_family != 0)
+		err = bind(udev_monitor->sock,
+			   (struct sockaddr *)&udev_monitor->snl, sizeof(struct sockaddr_nl));
+	else
+		return -EINVAL;
+
+	if (err < 0) {
+		err(udev_monitor->udev, "bind failed: %m\n");
+		return err;
 	}
+
+	/* enable receiving of sender credentials */
+	setsockopt(udev_monitor->sock, SOL_SOCKET, SO_PASSCRED, &on, sizeof(on));
 	return 0;
 }
 
@@ -247,6 +248,9 @@ struct udev_device *udev_monitor_receive_device(struct udev_monitor *udev_monito
 	struct msghdr smsg;
 	struct iovec iov;
 	char cred_msg[CMSG_SPACE(sizeof(struct ucred))];
+	struct cmsghdr *cmsg;
+	struct sockaddr_nl snl;
+	struct ucred *cred;
 	char buf[4096];
 	size_t bufpos;
 	int devpath_set = 0;
@@ -266,37 +270,50 @@ struct udev_device *udev_monitor_receive_device(struct udev_monitor *udev_monito
 	smsg.msg_control = cred_msg;
 	smsg.msg_controllen = sizeof(cred_msg);
 
+	if (udev_monitor->snl.nl_family != 0) {
+		smsg.msg_name = &snl;
+		smsg.msg_namelen = sizeof snl;
+	}
+
 	if (recvmsg(udev_monitor->sock, &smsg, 0) < 0) {
 		if (errno != EINTR)
-			info(udev_monitor->udev, "unable to receive message");
+			info(udev_monitor->udev, "unable to receive message\n");
 		return NULL;
 	}
 
-	if (udev_monitor->sun.sun_family != 0) {
-		struct cmsghdr *cmsg = CMSG_FIRSTHDR(&smsg);
-		struct ucred *cred = (struct ucred *)CMSG_DATA (cmsg);
-
-		if (cmsg == NULL || cmsg->cmsg_type != SCM_CREDENTIALS) {
-			info(udev_monitor->udev, "no sender credentials received, message ignored");
+	if (udev_monitor->snl.nl_family != 0) {
+		if (snl.nl_groups == 0) {
+			info(udev_monitor->udev, "unicast netlink message ignored\n");
 			return NULL;
 		}
-
-		if (cred->uid != 0) {
-			info(udev_monitor->udev, "sender uid=%d, message ignored", cred->uid);
+		if ((snl.nl_groups == UDEV_MONITOR_KERNEL) && (snl.nl_pid > 0)) {
+			info(udev_monitor->udev, "multicast kernel netlink message from pid %d ignored\n", snl.nl_pid);
 			return NULL;
 		}
 	}
 
+	cmsg = CMSG_FIRSTHDR(&smsg);
+	if (cmsg == NULL || cmsg->cmsg_type != SCM_CREDENTIALS) {
+		info(udev_monitor->udev, "no sender credentials received, message ignored\n");
+		return NULL;
+	}
+
+	cred = (struct ucred *)CMSG_DATA(cmsg);
+	if (cred->uid != 0) {
+		info(udev_monitor->udev, "sender uid=%d, message ignored\n", cred->uid);
+		return NULL;
+	}
+
 	/* skip header */
 	bufpos = strlen(buf) + 1;
 	if (bufpos < sizeof("a@/d") || bufpos >= sizeof(buf)) {
-		info(udev_monitor->udev, "invalid message length");
+		info(udev_monitor->udev, "invalid message length\n");
 		return NULL;
 	}
 
 	/* check message header */
 	if (strstr(buf, "@/") == NULL) {
-		info(udev_monitor->udev, "unrecognized message header");
+		info(udev_monitor->udev, "unrecognized message header\n");
 		return NULL;
 	}
 
@@ -387,9 +404,20 @@ int udev_monitor_send_device(struct udev_monitor *udev_monitor, struct udev_devi
 	len = udev_device_get_properties_monitor_buf(udev_device, &buf);
 	if (len < 32)
 		return -1;
-	count = sendto(udev_monitor->sock,
-		       buf, len, 0,
-		       (struct sockaddr *)&udev_monitor->sun, udev_monitor->addrlen);
-	info(udev_monitor->udev, "passed %zi bytes to monitor %p, \n", count, udev_monitor);
+	if (udev_monitor->sun.sun_family != 0)
+		count = sendto(udev_monitor->sock,
+			       buf, len, 0,
+			       (struct sockaddr *)&udev_monitor->sun,
+			       udev_monitor->addrlen);
+	else if (udev_monitor->snl.nl_family != 0)
+		/* no destination besides the muticast group, we will always get ECONNREFUSED */
+		count = sendto(udev_monitor->sock,
+			       buf, len, 0,
+			       (struct sockaddr *)&udev_monitor->snl_peer,
+			       sizeof(struct sockaddr_nl));
+	else
+		return -1;
+
+	info(udev_monitor->udev, "passed %zi bytes to monitor %p\n", count, udev_monitor);
 	return count;
 }
diff --git a/udev/lib/libudev-util.c b/udev/lib/libudev-util.c
index 1cd18c8..49812e5 100644
--- a/udev/lib/libudev-util.c
+++ b/udev/lib/libudev-util.c
@@ -109,12 +109,12 @@ int util_log_priority(const char *priority)
 	return 0;
 }
 
-size_t util_path_encode(char *s, size_t len)
+size_t util_path_encode(char *s, size_t size)
 {
-	char t[(len * 3)+1];
+	char t[(size * 4)+1];
 	size_t i, j;
 
-	for (i = 0, j = 0; s[i] != '\0'; i++) {
+	for (i = 0, j = 0; s[i] != '\0' && i < size; i++) {
 		if (s[i] == '/') {
 			memcpy(&t[j], "\\x2f", 4);
 			j += 4;
@@ -126,11 +126,12 @@ size_t util_path_encode(char *s, size_t len)
 			j++;
 		}
 	}
-	if (len == 0)
-		return j;
-	i = (j < len - 1) ? j : len - 1;
-	memcpy(s, t, i);
-	s[i] = '\0';
+	if (i >= size)
+		return 0;
+	if (j >= size)
+		return 0;
+	memcpy(s, t, j);
+	s[j] = '\0';
 	return j;
 }
 
@@ -142,7 +143,7 @@ size_t util_path_decode(char *s)
 		if (memcmp(&s[i], "\\x2f", 4) == 0) {
 			s[j] = '/';
 			i += 4;
-		}else if (memcmp(&s[i], "\\x5c", 4) == 0) {
+		} else if (memcmp(&s[i], "\\x5c", 4) == 0) {
 			s[j] = '\\';
 			i += 4;
 		} else {
diff --git a/udev/lib/libudev.h b/udev/lib/libudev.h
index ea6c9dd..a35f0bd 100644
--- a/udev/lib/libudev.h
+++ b/udev/lib/libudev.h
@@ -81,8 +81,12 @@ extern const char *udev_device_get_sysattr_value(struct udev_device *udev_device
 
 /* udev and kernel device events */
 struct udev_monitor;
+enum udev_monitor_netlink_group {
+	UDEV_MONITOR_KERNEL	= 1,
+	UDEV_MONITOR_UDEV	= 2,
+};
 extern struct udev_monitor *udev_monitor_new_from_socket(struct udev *udev, const char *socket_path);
-extern struct udev_monitor *udev_monitor_new_from_netlink(struct udev *udev);
+extern struct udev_monitor *udev_monitor_new_from_netlink(struct udev *udev, enum udev_monitor_netlink_group group);
 extern int udev_monitor_enable_receiving(struct udev_monitor *udev_monitor);
 extern struct udev_monitor *udev_monitor_ref(struct udev_monitor *udev_monitor);
 extern void udev_monitor_unref(struct udev_monitor *udev_monitor);
diff --git a/udev/udevadm-monitor.c b/udev/udevadm-monitor.c
index 14a6edc..02f8f5e 100644
--- a/udev/udevadm-monitor.c
+++ b/udev/udevadm-monitor.c
@@ -115,11 +115,6 @@ int udevadm_monitor(struct udev *udev, int argc, char *argv[])
 		print_udev =1;
 	}
 
-	if (getuid() != 0 && print_kernel) {
-		fprintf(stderr, "root privileges needed to subscribe to kernel events\n");
-		goto out;
-	}
-
 	/* set signal handlers */
 	memset(&act, 0x00, sizeof(struct sigaction));
 	act.sa_handler = (void (*)(int)) sig_handler;
@@ -130,7 +125,7 @@ int udevadm_monitor(struct udev *udev, int argc, char *argv[])
 
 	printf("monitor will print the received events for:\n");
 	if (print_udev) {
-		udev_monitor = udev_monitor_new_from_socket(udev, "@/org/kernel/udev/monitor");
+		udev_monitor = udev_monitor_new_from_netlink(udev, UDEV_MONITOR_UDEV);
 		if (udev_monitor == NULL) {
 			rc = 1;
 			goto out;
@@ -142,8 +137,9 @@ int udevadm_monitor(struct udev *udev, int argc, char *argv[])
 		printf("UDEV the event which udev sends out after rule processing\n");
 	}
 	if (print_kernel) {
-		kernel_monitor = udev_monitor_new_from_netlink(udev);
+		kernel_monitor = udev_monitor_new_from_netlink(udev, UDEV_MONITOR_KERNEL);
 		if (kernel_monitor == NULL) {
+			fprintf(stderr, "unable to subscribe to kernel events\n");
 			rc = 3;
 			goto out;
 		}
diff --git a/udev/udevd.c b/udev/udevd.c
index bfd7323..36e2c76 100644
--- a/udev/udevd.c
+++ b/udev/udevd.c
@@ -190,7 +190,6 @@ static void event_fork(struct udev_event *event)
 	switch (pid) {
 	case 0:
 		/* child */
-		udev_monitor_unref(kernel_monitor);
 		udev_ctrl_unref(udev_ctrl);
 		if (inotify_fd >= 0)
 			close(inotify_fd);
@@ -228,6 +227,9 @@ static void event_fork(struct udev_event *event)
 		if (err == 0 && !event->ignore_device && udev_get_run(event->udev))
 			udev_event_execute_run(event);
 
+		/* send processed event back to the kernel netlink socket */
+		udev_monitor_send_device(kernel_monitor, event->dev);
+
 		info(event->udev, "seq %llu exit with %i\n", udev_device_get_seqnum(event->dev), err);
 		logging_close();
 		if (err != 0)
@@ -722,7 +724,7 @@ int main(int argc, char *argv[])
 		goto exit;
 	}
 
-	kernel_monitor = udev_monitor_new_from_netlink(udev);
+	kernel_monitor = udev_monitor_new_from_netlink(udev, UDEV_MONITOR_KERNEL);
 	if (kernel_monitor == NULL || udev_monitor_enable_receiving(kernel_monitor) < 0) {
 		fprintf(stderr, "error initializing netlink socket\n");
 		err(udev, "error initializing netlink socket\n");
